//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/MyInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputAsset"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""63895489-8558-4a52-a392-caeeff41e521"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d5120fb5-6dc1-4c03-85ac-4d7ff1379466"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02d2a67e-231e-40a6-a37a-dfad1293d46f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameControls"",
            ""id"": ""a956209c-cf3d-470b-9dd2-6d4f330e5229"",
            ""actions"": [
                {
                    ""name"": ""Die"",
                    ""type"": ""Button"",
                    ""id"": ""1968dd62-0643-4c6d-9c06-b391e1789634"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""5abc023a-ae0e-4e40-bf5e-28830e6ca8aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackToMenu"",
                    ""type"": ""Button"",
                    ""id"": ""6caa1eca-cab1-4f29-9503-39586ba21f5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aadf27fc-586c-44bd-9677-76e189e82bf3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Die"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad54a5ba-6bc3-44cc-b311-e30510f70e80"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97130771-33f8-42d8-ae7a-fd2c6cddd673"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackToMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Jump = m_PlayerControls.FindAction("Jump", throwIfNotFound: true);
        // GameControls
        m_GameControls = asset.FindActionMap("GameControls", throwIfNotFound: true);
        m_GameControls_Die = m_GameControls.FindAction("Die", throwIfNotFound: true);
        m_GameControls_Restart = m_GameControls.FindAction("Restart", throwIfNotFound: true);
        m_GameControls_BackToMenu = m_GameControls.FindAction("BackToMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_Jump;
    public struct PlayerControlsActions
    {
        private @MyInputAsset m_Wrapper;
        public PlayerControlsActions(@MyInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerControls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // GameControls
    private readonly InputActionMap m_GameControls;
    private IGameControlsActions m_GameControlsActionsCallbackInterface;
    private readonly InputAction m_GameControls_Die;
    private readonly InputAction m_GameControls_Restart;
    private readonly InputAction m_GameControls_BackToMenu;
    public struct GameControlsActions
    {
        private @MyInputAsset m_Wrapper;
        public GameControlsActions(@MyInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Die => m_Wrapper.m_GameControls_Die;
        public InputAction @Restart => m_Wrapper.m_GameControls_Restart;
        public InputAction @BackToMenu => m_Wrapper.m_GameControls_BackToMenu;
        public InputActionMap Get() { return m_Wrapper.m_GameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGameControlsActions instance)
        {
            if (m_Wrapper.m_GameControlsActionsCallbackInterface != null)
            {
                @Die.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnDie;
                @Die.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnDie;
                @Die.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnDie;
                @Restart.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnRestart;
                @BackToMenu.started -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnBackToMenu;
                @BackToMenu.performed -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnBackToMenu;
                @BackToMenu.canceled -= m_Wrapper.m_GameControlsActionsCallbackInterface.OnBackToMenu;
            }
            m_Wrapper.m_GameControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Die.started += instance.OnDie;
                @Die.performed += instance.OnDie;
                @Die.canceled += instance.OnDie;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @BackToMenu.started += instance.OnBackToMenu;
                @BackToMenu.performed += instance.OnBackToMenu;
                @BackToMenu.canceled += instance.OnBackToMenu;
            }
        }
    }
    public GameControlsActions @GameControls => new GameControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGameControlsActions
    {
        void OnDie(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnBackToMenu(InputAction.CallbackContext context);
    }
}
